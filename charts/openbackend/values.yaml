# Default values for openbackend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

secrets:
  service_role_jwt_secret: "mypass"
  anonymous_jwt_secret: "mypass"

namespaces:
  faasFunc:
    name: openbackend-fn
    role: openfaas-fn
    inPort: 4222
    outPort: 4222
    linkerdInject:
      enabled: true

apisix:
  enableIPv6: true
  setIDFromPodUID: false
  customLuaSharedDicts: []
  luaModuleHook:
    enabled: false
    luaPath: ""
    hookPoint: ""
    configMapRef:
      name: ""
      mounts:
      - key: ""
        path: ""
  enableCustomizedConfig: false
  customizedConfig: {}
  image:
    repository: apache/apisix
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: 2.15.0-alpine
  kind: Deployment
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  podDisruptionBudget:
    enabled: false
    minAvailable: 90%
    maxUnavailable: 1
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # If true, it will sets the anti-affinity of the Pod.
  podAntiAffinity:
    enabled: false
  timezone: ""
  extraEnvVars: []
  gateway:
    type: NodePort
    externalTrafficPolicy: Cluster
    externalIPs: []
    http:
      enabled: true
      servicePort: 80
      containerPort: 9080
    tls:
      enabled: false
      servicePort: 443
      containerPort: 9443
      existingCASecret: ""
      certCAFilename: ""
      http2:
        enabled: true
    stream:  # L4 proxy (TCP/UDP)
      enabled: false
      only: false
      tcp: []
      udp: []
    ingress:
      enabled: false
      annotations: {}
      hosts:
        - host: apisix.local
          paths: []
      tls: []
  admin:
    enabled: true
    type: ClusterIP
    externalIPs: []
    port: 9180
    servicePort: 9180
    cors: true
    credentials:
      admin: edd1c9f034335f136f87ad84b625c8f1
      viewer: 4054f7cf07e344346cd3f287985e76a2
    allow:
      ipList:
        - 127.0.0.1/24
  nginx:
    workerRlimitNofile: "20480"
    workerConnections: "10620"
    workerProcesses: auto
    enableCPUAffinity: true
  # APISIX plugins to be enabled
  plugins:
    - api-breaker
    - authz-keycloak
    - basic-auth
    - batch-requests
    - consumer-restriction
    - cors
    - echo
    - fault-injection
    - grpc-transcode
    - hmac-auth
    - http-logger
    - ip-restriction
    - ua-restriction
    - jwt-auth
    - kafka-logger
    - key-auth
    - limit-conn
    - limit-count
    - limit-req
    - node-status
    - openid-connect
    - authz-casbin
    - prometheus
    - proxy-cache
    - proxy-mirror
    - proxy-rewrite
    - redirect
    - referer-restriction
    - request-id
    - request-validation
    - response-rewrite
    - serverless-post-function
    - serverless-pre-function
    - sls-logger
    - syslog
    - tcp-logger
    - udp-logger
    - uri-blocker
    - wolf-rbac
    - zipkin
    - traffic-split
    - gzip
    - real-ip
    - ext-plugin-pre-req
    - ext-plugin-post-req
  stream_plugins:
    - mqtt-proxy
    - ip-restriction
    - limit-conn
  pluginAttrs: {}
  extPlugin:
    enabled: false
    cmd: ["/path/to/apisix-plugin-runner/runner", "run"]
  # customPlugins allows you to mount your own HTTP plugins.
  customPlugins:
    enabled: false
    # the lua_path that tells APISIX where it can find plugins,
    # note the last ';' is required.
    luaPath: "/opts/custom_plugins/?.lua"
    plugins:
        # plugin name.
      - name: ""
        # plugin attrs
        attrs: {}
        # plugin codes can be saved inside configmap object.
        configMap:
          # name of configmap.
          name: ""
          # since keys in configmap is flat, mountPath allows to define the mount
          # path, so that plugin codes can be mounted hierarchically.
          mounts:
            - key: ""
              path: ""
            - key: ""
              path: ""
  updateStrategy: {}
  extraVolumes: []
  extraVolumeMounts: []
  discovery:
    enabled: false
    registry:
        # Integration service discovery registry. E.g eureka\dns\nacos\consul_kv
        # reference:
        # https://apisix.apache.org/docs/apisix/discovery#configuration-for-eureka
        # https://apisix.apache.org/docs/apisix/discovery/dns#service-discovery-via-dns
        # https://apisix.apache.org/docs/apisix/discovery/consul_kv#configuration-for-consul-kv
        # https://apisix.apache.org/docs/apisix/discovery/nacos#configuration-for-nacos
        #
        # an eureka example:
        # eureka:
        #   host:
        #     - "http://${username}:${password}@${eureka_host1}:${eureka_port1}"
        #     - "http://${username}:${password}@${eureka_host2}:${eureka_port2}"
        #   prefix: "/eureka/"
        #   fetch_interval: 30
        #   weight: 100
        #   timeout:
        #     connect: 2000
        #     send: 2000
        #     read: 5000
  logs:
    enableAccessLog: true
    accessLog: "/dev/stdout"
    accessLogFormat: '$remote_addr - $remote_user [$time_local] $http_host \"$request\" $status $body_bytes_sent $request_time \"$http_referer\" \"$http_user_agent\" $upstream_addr $upstream_status $upstream_response_time \"$upstream_scheme://$upstream_host$upstream_uri\"'
    accessLogFormatEscape: default
    errorLog: "/dev/stderr"
    errorLogLevel: "warn"
  dns:
    resolvers:
      - 127.0.0.1
      - 172.20.0.10
      - 114.114.114.114
      - 223.5.5.5
      - 1.1.1.1
      - 8.8.8.8
    validity: 30
    timeout: 5
  initContainer:
    image: busybox
    tag: 1.28
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  # Custom configuration snippet.
  configurationSnippet:
    main: |

    httpStart: |

    httpEnd: |

    httpSrv: |

    httpAdmin: |

    stream: |

  # Observability configuration.
  # ref: https://apisix.apache.org/docs/apisix/plugins/prometheus/
  serviceMonitor:
    enabled: false
    # namespace where the serviceMonitor is deployed, by default, it is the same as the namespace of the apisix
    namespace: ""
    # name of the serviceMonitor, by default, it is the same as the apisix fullname
    name: ""
    # interval at which metrics should be scraped
    interval: 15s
    # path of the metrics endpoint
    path: /apisix/prometheus/metrics
    # prefix of the metrics
    metricPrefix: apisix_
    # container port where the metrics are exposed
    containerPort: 9091
    # @param serviceMonitor.labels ServiceMonitor extra labels
    labels: {}
    # @param serviceMonitor.annotations ServiceMonitor annotations
    annotations: {}

  etcd:
    service:
      port: 2379  
    prefix: "/apisix"
    timeout: 30
    auth:
      rbac:
        # No authentication by default
        enabled: false
      tls:
        enabled: false

# etcd configuration
# use the FQDN address or the IP of the etcd
# ref.: https://artifacthub.io/packages/helm/bitnami/etcd
etcd:
  replicaCount: 2
  service:
    port: 2379
  auth:
    rbac:
      # No authentication by default
      create: false
      user: ""
      password: ""
    tls:
      enabled: false
      existingSecret: ""
      certFilename: ""
      certKeyFilename: ""
      verify: true
      sni: ""

